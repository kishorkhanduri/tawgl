{"ast":null,"code":"import firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    /**\r\n     * Registers the user with given details\r\n     */\n    this.registerUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\r\n     * Login user with given details\r\n     */\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\r\n     * forget Password user with given details\r\n     */\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\r\n     * Logout the user\r\n     */\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    this.setLoggeedInUser = user => {\n      localStorage.setItem(\"authUser\", JSON.stringify(user));\n    };\n    /**\r\n     * Returns the authenticated user\r\n     */\n    this.getAuthenticatedUser = () => {\n      if (!localStorage.getItem(\"authUser\")) return null;\n      return JSON.parse(localStorage.getItem(\"authUser\"));\n    };\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n}\nlet _fireBaseBackend = null;\n\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n  return _fireBaseBackend;\n};\n\n/**\r\n * Returns the firebase backend\r\n */\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\nexport { initFirebaseBackend, getFirebaseBackend };","map":{"version":3,"names":["firebase","FirebaseAuthBackend","constructor","firebaseConfig","registerUser","email","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","loginUser","signInWithEmailAndPassword","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","setLoggeedInUser","localStorage","setItem","JSON","stringify","getAuthenticatedUser","getItem","parse","initializeApp","onAuthStateChanged","removeItem","errorMessage","message","_fireBaseBackend","initFirebaseBackend","config","getFirebaseBackend"],"sources":["D:/excercise-t/src/helpers/firebase_helper.js"],"sourcesContent":["import firebase from \"firebase/app\";\r\n\r\n// Add the Firebase products that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nclass FirebaseAuthBackend {\r\n  constructor(firebaseConfig) {\r\n    if (firebaseConfig) {\r\n      // Initialize Firebase\r\n      firebase.initializeApp(firebaseConfig);\r\n      firebase.auth().onAuthStateChanged(user => {\r\n        if (user) {\r\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\r\n        } else {\r\n          localStorage.removeItem(\"authUser\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the user with given details\r\n   */\r\n  registerUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(\r\n          user => {\r\n            resolve(firebase.auth().currentUser);\r\n          },\r\n          error => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Login user with given details\r\n   */\r\n  loginUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(\r\n          user => {\r\n            resolve(firebase.auth().currentUser);\r\n          },\r\n          error => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * forget Password user with given details\r\n   */\r\n  forgetPassword = email => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .sendPasswordResetEmail(email, {\r\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\r\n        })\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch(error => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Logout the user\r\n   */\r\n  logout = () => {\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signOut()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch(error => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  setLoggeedInUser = user => {\r\n    localStorage.setItem(\"authUser\", JSON.stringify(user));\r\n  };\r\n\r\n  /**\r\n   * Returns the authenticated user\r\n   */\r\n  getAuthenticatedUser = () => {\r\n    if (!localStorage.getItem(\"authUser\")) return null;\r\n    return JSON.parse(localStorage.getItem(\"authUser\"));\r\n  };\r\n\r\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\r\n  _handleError(error) {\r\n    // var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    return errorMessage;\r\n  }\r\n}\r\n\r\nlet _fireBaseBackend = null;\r\n\r\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\r\nconst initFirebaseBackend = config => {\r\n  if (!_fireBaseBackend) {\r\n    _fireBaseBackend = new FirebaseAuthBackend(config);\r\n  }\r\n  return _fireBaseBackend;\r\n};\r\n\r\n/**\r\n * Returns the firebase backend\r\n */\r\nconst getFirebaseBackend = () => {\r\n  return _fireBaseBackend;\r\n};\r\n\r\nexport { initFirebaseBackend, getFirebaseBackend };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}