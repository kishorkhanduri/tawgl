{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n// Login Redux States\nimport { FORGET_USER } from './actionTypes';\nimport { forgetUserSuccessful, userForgetPasswordError } from './actions';\n\n// AUTH related methods\nimport { postForgetPwd } from '../../../helpers/fackBackend_Helper';\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\n\n//Initilize firebase\nconst fireBaseBackend = getFirebaseBackend();\n\n//If user is login then dispatch redux action's are directly from here.\nfunction forgetUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n  return function* () {\n    try {\n      if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n        const response = yield call(fireBaseBackend.forgetPassword, user.useremail);\n        if (response) {\n          yield put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));\n        }\n      } else {\n        const response = yield call(postForgetPwd, '/forget-pwd', {\n          email: user.useremail\n        });\n        if (response) {\n          yield put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));\n        }\n      }\n    } catch (error) {\n      yield put(userForgetPasswordError(error));\n    }\n  }();\n}\nexport function* watchUserForget() {\n  yield takeEvery(FORGET_USER, forgetUser);\n}\nfunction* forgetSaga() {\n  yield all([fork(watchUserForget)]);\n}\nexport default forgetSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","FORGET_USER","forgetUserSuccessful","userForgetPasswordError","postForgetPwd","getFirebaseBackend","fireBaseBackend","forgetUser","_ref","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","forgetPassword","useremail","email","error","watchUserForget","forgetSaga"],"sources":["D:/excercise-t/src/store/auth/forgetpwd/saga.js"],"sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n// Login Redux States\r\nimport { FORGET_USER } from './actionTypes';\r\nimport { forgetUserSuccessful, userForgetPasswordError } from './actions';\r\n\r\n// AUTH related methods\r\nimport { postForgetPwd } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n        try {\r\n            if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n                const response = yield call(fireBaseBackend.forgetPassword, user.useremail);\r\n                if (response) {\r\n                  yield put(\r\n                    forgetUserSuccessful(\r\n                      \"Reset link are sended to your mailbox, check there first\"\r\n                    )\r\n                  );\r\n                }\r\n            }else{\r\n                const response = yield call(postForgetPwd, '/forget-pwd', {email: user.useremail});\r\n                if (response) {\r\n                    yield put(\r\n                        forgetUserSuccessful(\r\n                        \"Reset link are sended to your mailbox, check there first\"\r\n                      )\r\n                    );\r\n                }\r\n            }            \r\n        } catch (error) {\r\n            yield put(userForgetPasswordError(error));\r\n        }\r\n}\r\n\r\nexport function* watchUserForget() {\r\n    yield takeEvery(FORGET_USER, forgetUser)\r\n}\r\n\r\nfunction* forgetSaga() {\r\n    yield all([fork(watchUserForget)]);\r\n}\r\n\r\nexport default forgetSaga;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,WAAW;;AAEzE;AACA,SAASC,aAAa,QAAQ,qCAAqC;AACnE,SAASC,kBAAkB,QAAQ,kCAAkC;;AAErE;AACA,MAAMC,eAAe,GAAGD,kBAAkB,CAAC,CAAC;;AAE5C;AACA,SAAUE,UAAUA,CAAAC,IAAA;EAAA,IAAC;IAAEC,OAAO,EAAE;MAAEC,IAAI;MAAEC;IAAQ;EAAE,CAAC,GAAAH,IAAA;EAAA,oBAAE;IAC7C,IAAI;MACA,IAAGI,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,UAAU,EAAC;QAChD,MAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACM,eAAe,CAACU,cAAc,EAAEN,IAAI,CAACO,SAAS,CAAC;QAC3E,IAAIF,QAAQ,EAAE;UACZ,MAAMjB,GAAG,CACPI,oBAAoB,CAClB,0DACF,CACF,CAAC;QACH;MACJ,CAAC,MAAI;QACD,MAAMa,QAAQ,GAAG,MAAMf,IAAI,CAACI,aAAa,EAAE,aAAa,EAAE;UAACc,KAAK,EAAER,IAAI,CAACO;QAAS,CAAC,CAAC;QAClF,IAAIF,QAAQ,EAAE;UACV,MAAMjB,GAAG,CACLI,oBAAoB,CACpB,0DACF,CACF,CAAC;QACL;MACJ;IACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACZ,MAAMrB,GAAG,CAACK,uBAAuB,CAACgB,KAAK,CAAC,CAAC;IAC7C;EACR,CAAC;AAAA;AAED,OAAO,UAAUC,eAAeA,CAAA,EAAG;EAC/B,MAAMxB,SAAS,CAACK,WAAW,EAAEM,UAAU,CAAC;AAC5C;AAEA,UAAUc,UAAUA,CAAA,EAAG;EACnB,MAAMtB,GAAG,CAAC,CAACF,IAAI,CAACuB,eAAe,CAAC,CAAC,CAAC;AACtC;AAEA,eAAeC,UAAU"},"metadata":{},"sourceType":"module"}