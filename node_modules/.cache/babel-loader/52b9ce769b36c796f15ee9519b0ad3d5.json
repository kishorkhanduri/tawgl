{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport { calenderDefaultCategories, events, orders, productsData, customerData, shops, cartData, comments, chats, groups, messages, contacts } from \"../../common/data\";\nlet users = [{\n  id: 1,\n  username: \"admin\",\n  password: \"123456\",\n  email: \"nandkishor@design.in\"\n}];\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost(\"/post-register\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-login\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id.toString());\n          resolve([200, {\n            ...product,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n};\nexport default fakeBackend;","map":{"version":3,"names":["axios","MockAdapter","url","calenderDefaultCategories","events","orders","productsData","customerData","shops","cartData","comments","chats","groups","messages","contacts","users","id","username","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","onGet","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","headers","GET_CATEGORIES","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","toString","GET_ORDERS","GET_CART_DATA","GET_CUSTOMERS","GET_SHOPS","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE"],"sources":["D:/excercise-t/src/helpers/AuthType/fakeBackend.js"],"sourcesContent":["import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\nimport * as url from \"../url_helper\";\r\n\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  orders,\r\n  productsData,\r\n  customerData,\r\n  shops,\r\n  cartData,\r\n  comments,\r\n  chats,\r\n  groups,\r\n  messages,\r\n  contacts,\r\n} from \"../../common/data\";\r\n\r\nlet users = [\r\n  {\r\n    id: 1,\r\n    username: \"admin\",\r\n    password: \"123456\",\r\n    email: \"nandkishor@design.in\",\r\n  },\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost(\"/post-register\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/post-login\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    const validUser = users.filter(\r\n      (usr) => usr.email === user.username && usr.password === user.password\r\n    );\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        if (validUser[\"length\"] === 1) {\r\n          resolve([200, validUser[0]]);\r\n        } else {\r\n          reject([\r\n            400,\r\n            \"Username and password are invalid. Please enter correct username and password\",\r\n          ]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n  });\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events]);\r\n        } else {\r\n          reject([400, \"Cannot get events\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot add event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot update event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event]);\r\n        } else {\r\n          reject([400, \"Cannot delete event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories]);\r\n        } else {\r\n          reject([400, \"Cannot get categories\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, productsData]);\r\n        } else {\r\n          reject([400, \"Cannot get products\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const product = productsData.find(\r\n            (product) => product.id.toString() === params.id.toString()\r\n          );\r\n          resolve([200, { ...product, comments }]);\r\n        } else {\r\n          reject([400, \"Cannot get product detail\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_ORDERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (orders) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, orders]);\r\n        } else {\r\n          reject([400, \"Cannot get orders\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CART_DATA).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (cartData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, cartData]);\r\n        } else {\r\n          reject([400, \"Cannot get cart data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (customerData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, customerData]);\r\n        } else {\r\n          reject([400, \"Cannot get customers data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_SHOPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (shops) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, shops]);\r\n        } else {\r\n          reject([400, \"Cannot get shops data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CHATS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (chats) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, chats]);\r\n        } else {\r\n          reject([400, \"Cannot get chats\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_GROUPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (groups) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, groups]);\r\n        } else {\r\n          reject([400, \"Cannot get groups\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CONTACTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (contacts) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, contacts]);\r\n        } else {\r\n          reject([400, \"Cannot get contacts\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (messages) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const filteredMessages = messages.filter(\r\n            (msg) => msg.roomId === params.roomId\r\n          );\r\n          resolve([200, filteredMessages]);\r\n        } else {\r\n          reject([400, \"Cannot get messages\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_MESSAGE).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.data]);\r\n        } else {\r\n          reject([400, \"Cannot add message\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport default fakeBackend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}