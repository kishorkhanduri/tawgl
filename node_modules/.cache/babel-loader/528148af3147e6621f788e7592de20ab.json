{"ast":null,"code":"import axios from 'axios';\nimport { del, get, post, put } from \"./api_helper\";\nimport * as url from \"./url_helper\";\n\n// Gets the logged in user data from local session \nconst getLoggedInUser = () => {\n  const user = localStorage.getItem('authUser');\n  if (user) return JSON.parse(user);\n  return null;\n};\n\n//is user is logged in\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n};\n\n// Register Method\nconst postRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n        default:\n          message = err[1];\n          break;\n      }\n    }\n    throw message;\n  });\n};\n\n// Login Method\nconst postLogin = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n};\n\n// postForgetPwd \nconst postForgetPwd = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n};\n// get Events\nexport const getEvents = () => get(url.GET_EVENTS);\n\n// add Events\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event);\n\n// update Event\nexport const updateEvent = event => put(url.UPDATE_EVENT, event);\n\n// delete Event\nexport const deleteEvent = event => del(url.DELETE_EVENT, {\n  headers: {\n    event\n  }\n});\n\n// get Categories\nexport const getCategories = () => get(url.GET_CATEGORIES);\n\n// get Products\nexport const getProducts = () => get(url.GET_PRODUCTS);\n\n// get Product detail\nexport const getProductDetail = id => get(`${url.GET_PRODUCTS_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n});\n\n// get orders\nexport const getOrders = () => get(url.GET_ORDERS);\n\n// add order\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order);\n\n// update order\nexport const updateOrder = order => put(url.UPDATE_ORDER, order);\n\n// delete order\nexport const deleteOrder = order => del(url.DELETE_ORDER, {\n  headers: {\n    order\n  }\n});\n\n// get cart data\nexport const getCartData = () => get(url.GET_CART_DATA);\n\n// get customers\nexport const getCustomers = () => get(url.GET_CUSTOMERS);\n\n// get shops\nexport const getShops = () => get(url.GET_SHOPS);\n\n// get chats\nexport const getChats = () => get(url.GET_CHATS);\n\n// get groups\nexport const getGroups = () => get(url.GET_GROUPS);\n\n// get Contacts\nexport const getContacts = () => get(url.GET_CONTACTS);\n\n// get messages\nexport const getMessages = function () {\n  let roomId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return get(`${url.GET_MESSAGES}/${roomId}`, {\n    params: {\n      roomId\n    }\n  });\n};\n\n// post messages\nexport const addMessage = message => post(url.ADD_MESSAGE, message);\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd };","map":{"version":3,"names":["axios","del","get","post","put","url","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postRegister","data","then","response","status","catch","err","message","postLogin","postForgetPwd","getEvents","GET_EVENTS","addNewEvent","event","ADD_NEW_EVENT","updateEvent","UPDATE_EVENT","deleteEvent","DELETE_EVENT","headers","getCategories","GET_CATEGORIES","getProducts","GET_PRODUCTS","getProductDetail","id","GET_PRODUCTS_DETAIL","params","getOrders","GET_ORDERS","addNewOrder","order","ADD_NEW_ORDER","updateOrder","UPDATE_ORDER","deleteOrder","DELETE_ORDER","getCartData","GET_CART_DATA","getCustomers","GET_CUSTOMERS","getShops","GET_SHOPS","getChats","GET_CHATS","getGroups","GET_GROUPS","getContacts","GET_CONTACTS","getMessages","roomId","arguments","length","undefined","GET_MESSAGES","addMessage","ADD_MESSAGE"],"sources":["D:/excercise-t/src/helpers/fackBackend_Helper.js"],"sourcesContent":["import axios from 'axios';\r\nimport { del, get, post, put } from \"./api_helper\";\r\nimport * as url from \"./url_helper\"\r\n\r\n// Gets the logged in user data from local session \r\nconst getLoggedInUser = () => {\r\n    const user = localStorage.getItem('authUser');\r\n    if (user)\r\n        return JSON.parse(user);\r\n    return null;\r\n}\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n    return getLoggedInUser() !== null;\r\n}\r\n\r\n// Register Method\r\nconst postRegister = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status >= 200 || response.status <= 299)\r\n            return response.data;\r\n        throw response.data;\r\n    }).catch(err => {\r\n        var message;\r\n        if (err.response && err.response.status) {\r\n            switch (err.response.status) {\r\n                case 404: message = \"Sorry! the page you are looking for could not be found\"; break;\r\n                case 500: message = \"Sorry! something went wrong, please contact our support team\"; break;\r\n                case 401: message = \"Invalid credentials\"; break;\r\n                default: message = err[1]; break;\r\n            }\r\n        }\r\n        throw message;\r\n    });\r\n\r\n}\r\n\r\n// Login Method\r\nconst postLogin = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status === 400 || response.status === 500)\r\n            throw response.data;\r\n        return response.data;\r\n    }).catch(err => {\r\n        throw err[1];\r\n    });\r\n}\r\n\r\n// postForgetPwd \r\nconst postForgetPwd = (url, data) => {\r\n    return axios.post(url, data).then(response => {\r\n        if (response.status === 400 || response.status === 500)\r\n            throw response.data;\r\n        return response.data;\r\n    }).catch(err => {\r\n        throw err[1];\r\n    });\r\n}\r\n// get Events\r\nexport const getEvents = () =>\r\n    get(url.GET_EVENTS)\r\n\r\n// add Events\r\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event)\r\n\r\n// update Event\r\nexport const updateEvent = event => put(url.UPDATE_EVENT, event)\r\n\r\n// delete Event\r\nexport const deleteEvent = event =>\r\n    del(url.DELETE_EVENT, { headers: { event } })\r\n\r\n// get Categories\r\nexport const getCategories = () => get(url.GET_CATEGORIES)\r\n\r\n// get Products\r\nexport const getProducts = () => get(url.GET_PRODUCTS)\r\n\r\n// get Product detail\r\nexport const getProductDetail = id =>\r\n  get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } })\r\n\r\n// get orders\r\nexport const getOrders = () => get(url.GET_ORDERS)\r\n\r\n// add order\r\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order)\r\n\r\n// update order\r\nexport const updateOrder = order => put(url.UPDATE_ORDER, order)\r\n\r\n// delete order\r\nexport const deleteOrder = order =>\r\n  del(url.DELETE_ORDER, { headers: { order } })\r\n\r\n// get cart data\r\nexport const getCartData = () => get(url.GET_CART_DATA)\r\n\r\n// get customers\r\nexport const getCustomers = () => get(url.GET_CUSTOMERS)\r\n\r\n// get shops\r\nexport const getShops = () => get(url.GET_SHOPS)\r\n\r\n// get chats\r\nexport const getChats = () => get(url.GET_CHATS)\r\n\r\n// get groups\r\nexport const getGroups = () => get(url.GET_GROUPS)\r\n\r\n// get Contacts\r\nexport const getContacts = () => get(url.GET_CONTACTS)\r\n\r\n// get messages\r\nexport const getMessages = (roomId = \"\") =>\r\n  get(`${url.GET_MESSAGES}/${roomId}`, { params: { roomId } })\r\n\r\n// post messages\r\nexport const addMessage = message => post(url.ADD_MESSAGE, message)\r\n\r\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd }"],"mappings":"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"},"metadata":{},"sourceType":"module"}