{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n//Account Redux states\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, registerUserFailed } from './actions';\n\n//AUTH related methods\nimport { postRegister } from '../../../helpers/fackBackend_Helper';\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\n\n// initialize firebase Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction registerUser(_ref) {\n  let {\n    payload: {\n      user\n    }\n  } = _ref;\n  return function* () {\n    try {\n      if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n        const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n        yield put(registerUserSuccessful(response));\n      } else {\n        const response = yield call(postRegister, '/post-register', user);\n        yield put(registerUserSuccessful(response));\n      }\n    } catch (error) {\n      yield put(registerUserFailed(error));\n    }\n  }();\n}\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\nexport default accountSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","postRegister","getFirebaseBackend","fireBaseBackend","registerUser","_ref","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","error","watchUserRegister","accountSaga"],"sources":["D:/excercise-t/src/store/auth/register/saga.js"],"sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from './actionTypes';\r\nimport { registerUserSuccessful, registerUserFailed } from './actions';\r\n\r\n//AUTH related methods\r\nimport { postRegister } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\r\n\r\n// initialize firebase Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n    try {\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n        else{\r\n            const response = yield call(postRegister, '/post-register', user);\r\n            yield put(registerUserSuccessful(response));\r\n        }\r\n    } catch (error) {\r\n        yield put(registerUserFailed(error));\r\n    }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n    yield takeEvery(REGISTER_USER, registerUser)\r\n}\r\n\r\nfunction* accountSaga() {\r\n    yield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,sBAAsB,EAAEC,kBAAkB,QAAQ,WAAW;;AAEtE;AACA,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,kBAAkB,QAAQ,kCAAkC;;AAErE;AACA,MAAMC,eAAe,GAAGD,kBAAkB,CAAC,CAAC;;AAE5C;AACA,SAAUE,YAAYA,CAAAC,IAAA;EAAA,IAAC;IAAEC,OAAO,EAAE;MAAEC;IAAK;EAAE,CAAC,GAAAF,IAAA;EAAA,oBAAE;IAC1C,IAAI;MACA,IAAGG,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,UAAU,EAAC;QAChD,MAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACM,eAAe,CAACC,YAAY,EAAEG,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,QAAQ,CAAC;QACpF,MAAMlB,GAAG,CAACI,sBAAsB,CAACY,QAAQ,CAAC,CAAC;MAC/C,CAAC,MACG;QACA,MAAMA,QAAQ,GAAG,MAAMd,IAAI,CAACI,YAAY,EAAE,gBAAgB,EAAEM,IAAI,CAAC;QACjE,MAAMZ,GAAG,CAACI,sBAAsB,CAACY,QAAQ,CAAC,CAAC;MAC/C;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAMnB,GAAG,CAACK,kBAAkB,CAACc,KAAK,CAAC,CAAC;IACxC;EACJ,CAAC;AAAA;AAED,OAAO,UAAUC,iBAAiBA,CAAA,EAAG;EACjC,MAAMtB,SAAS,CAACK,aAAa,EAAEM,YAAY,CAAC;AAChD;AAEA,UAAUY,WAAWA,CAAA,EAAG;EACpB,MAAMpB,GAAG,CAAC,CAACF,IAAI,CAACqB,iBAAiB,CAAC,CAAC,CAAC;AACxC;AAEA,eAAeC,WAAW"},"metadata":{},"sourceType":"module"}